package main

/*
这个问题和“最多能完成排序的块”相似，但给定数组中的元素可以重复，输入数组最大长度为2000，其中的元素最大为10**8。

arr是一个可能包含重复元素的整数数组，我们将这个数组分割成几个“块”，并将这些块分别进行排序。之后再连接起来，使得连接的结果和按升序排序后的原数组相同。

我们最多能将数组分成多少块？

示例 1:

输入: arr = [5,4,3,2,1]
输出: 1
解释:
将数组分成2块或者更多块，都无法得到所需的结果。
例如，分成 [5, 4], [3, 2, 1] 的结果是 [4, 5, 1, 2, 3]，这不是有序的数组。
示例 2:

输入: arr = [2,1,3,4,4]
输出: 4
解释:
我们可以把它分成两块，例如 [2, 1], [3, 4, 4]。
然而，分成 [2, 1], [3], [4], [4] 可以得到最多的块数。
注意:

arr的长度在[1, 2000]之间。
arr[i]的大小在[0, 10**8]之间。
*/

/*
思路：
`单调栈`
要想分割chunk，且对每个chunk进行排序后,与总的数组排序后一致，必然遵循的原则是，下一个chunk的最小值，比前一个chunk中的最大值还要大或者等于
可以通过递减单调栈来解决
遍历数组arr,入栈，如果push的值，比栈顶的值小，必然和其是属于同一个chunk,这里需要pop操作，直到大于栈顶得值为止，再入栈最大得那个值(第一个pop的值);
eg:[1,1,0,0,1]=>2;[5,1,1,8,1,6,5,9,7,8]=>1

如果大于/等于栈顶的值，入栈,认为是一个新的chunk
最终得到的栈的长度就是可以分割的max chunk的块数,其中每个数字表示当前chunk中得最大值


复杂度:

时间复杂度：O(N)
空间复杂度：O(N)
*/

func maxChunksToSorted(arr []int) int {
	stack := []int{}
	for _, v := range arr {
		if len(stack) == 0 {
			stack = append(stack, v)
			continue
		}
		max := stack[len(stack)-1]
		if max <= v {
			max = v
		}
		for len(stack) > 0 && stack[len(stack)-1] > v {
			stack = stack[:len(stack)-1]
		}
		stack = append(stack, max)
	}
	return len(stack)
}
